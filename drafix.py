import lxml.etree as et
import argparse
from pathlib import Path


def main() -> None:
    parser = argparse.ArgumentParser(description='Fix DRA file generated by inFakt')
    parser.add_argument('dra_file', help='DRA file name')
    parser.add_argument('-i', '--id', help='Add provided Polish ID card')
    parser.add_argument('-p', '--passport', help='Add provided Polish passport')
    parser.add_argument('-n', '--no-backup', help='Does not create backup file', action='store_true')
    parser.add_argument('-d', '--debug', help='Debug mode', action='store_true')
    args = parser.parse_args()

    if (args.id and args.passport) or not (args.id or args.passport):
        print("Needs exactly one argument '--id' or '--passport'")
        parser.print_help()
        exit(2)

    dra_file = Path(args.dra_file)
    print(f'Opening {dra_file}')
    with open(dra_file, encoding='utf-8') as file:
        document = et.parse(file)

    print('Patching')
    namespace = {'zus': document.xpath('namespace-uri(.)')}
    element = document.xpath('/zus:KEDU/zus:ZUSDRA/zus:II', namespaces=namespace)[0]
    document_type = '1' if args.id else '2'
    document_id = args.id if args.id else args.passport

    for idx, data in enumerate((document_type, document_id), start=3):
        item = et.Element(f'p{idx + 1}')
        item.text = data
        element.insert(idx, item)

    if args.debug:
        print(et.tostring(element, pretty_print=True).decode('utf-8'))

    if args.no_backup:
        fixed_dra_file = dra_file
    else:
        fixed_dra_file = Path(dra_file.parent, f'{dra_file.stem}_new{dra_file.suffix}')
    print(f'Writing to {fixed_dra_file}')
    with open(fixed_dra_file, mode='w', encoding='utf-8') as file:
        document.write(fixed_dra_file)
    print('Done')


if __name__ == '__main__':
    main()
